# this file contains C++ code templates for passing queries to DuckDB to handle
macro: |-
    #include <stdexcept>
    #include <vector>
    #include <iostream>
    #include "udf.hpp"

    duckdb::DuckDB db(nullptr);
    thread_local duckdb::Connection trans_con({db_name});

    std::vector<duckdb::Value> const_vector_gen(duckdb::Value val){{
        // generates vector_size copies of val to store in the vector
        std::vector<duckdb::Value> cons;
        cons.reserve({vector_size});
        for(int i=0;i<{vector_size};i++){{
            cons.emplace_back(val);
        }}
        return cons;
    }}

    template <typename T>
    std::vector<duckdb::Value> const_vector_gen_decimal(T raw_int, int8_t width, int8_t scale){{
        // generates vector_size copies of val to store in the vector
        std::vector<duckdb::Value> cons;
        cons.reserve(2048);
        for (int i = 0; i < 2048; i++){{
            cons.emplace_back(duckdb::Value::DECIMAL(raw_int, width, scale));
        }}
        return cons;
    }}

global: |-
    thread_local std::unique_ptr<duckdb::PreparedStatement> {function_name}_prepare = trans_con.Prepare("{prep_statement}");

# const_vector_gen: |-
#     vector<duckdb::Value> const_vector_gen(duckdb::Value val){{
#         # generates vector_size copies of val to store in the vector
#         std::vector<duckdb::Value> cons;
#         cons.reserve({vector_size});
#         for(int i=0;i<{vector_size};i++){
#             cons.emplace_back(val);
#         }
#         return cons;
#     }}
function_arg:

function_arg: |-
    const std::vector<duckdb::Value> &values{0}

prepare_input: |-
    for(size_t i=0;i<{vector_size};i++){{
        // int j = {arg} * {vector_size} + i;
        if(i >= input_size || valid_mask->at(i) == 0 || return_mask->at(i) == 1 || (loop_mask != NULL && loop_mask->at(i) == 0) || (continue_mask != NULL && continue_mask->at(i) == 1))
            input.emplace_back();
        else
            input.emplace_back(values{arg}[i]);
    }}
  
function: |-
    // valid_mask and return_mask should not be null
    std::vector<duckdb::Value> {function_name}({function_args}std::vector<bool> *valid_mask, std::vector<bool> *return_mask, std::vector<bool> *loop_mask, std::vector<bool> *continue_mask){{
        // prepare ps input
        std::vector<duckdb::Value> input;
        input.reserve({input_size});
        size_t input_size = valid_mask->size();
    {prepare_input}
        // execute and fetch result
        auto res = {function_name}_prepare->Execute(input);
        if(res->HasError()){{
            std::cout<<{function_name}_prepare->query<<std::endl;
            throw std::runtime_error("Error when waiting for query result.");
            return input;
        }}
        auto data = res->Fetch();
        // prepare result
        std::vector<duckdb::Value> ret;
        ret.reserve(input_size);
        for (idx_t i = 0; i < input_size; i++) {{
            ret.emplace_back(data->GetValue(0, i));
        }}
        return ret;
    }}

function_no_var: |-
    // valid_mask and return_mask should not be null
    std::vector<duckdb::Value> {function_name}(std::vector<bool> *valid_mask, std::vector<bool> *return_mask, std::vector<bool> *loop_mask, std::vector<bool> *continue_mask){{
        size_t input_size = valid_mask->size();
        auto res = trans_con.Query({query});
        if(res->HasError()){{
            throw std::runtime_error("Error when waiting for query result.");
            return std::vector<duckdb::Value>();
        }}
        auto data = res->Fetch();
        // prepare result
        std::vector<duckdb::Value> ret;
        ret.reserve(input_size);
        for (idx_t i = 0; i < input_size; i++) {{
            ret.emplace_back(data->GetValue(0, 0));
        }}
        return ret;
    }}

function_call: |-
    {function_name}({prepare_args})