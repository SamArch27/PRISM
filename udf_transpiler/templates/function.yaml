fshell: |-
  void {function_name}(duckdb::DataChunk &args, duckdb::ExpressionState &state, duckdb::Vector &result) {{
    std::vector<bool> {return_mask_var}(args.size());
    std::vector<duckdb::Value> return_values(args.size());
    for(size_t i = 0; i < args.size() ; i++) {{
      {return_mask_var}[i] = false;
    }}
    std::vector<bool> {active_lanes_var}(args.size());
    for(size_t i = 0; i < args.size() ; i++) {{
      {active_lanes_var}[i] = true;
    }}
    /** FUNCTION ARGS **/
    {function_args}
    /** INITIALIZE VARIABLES **/
    {initializations}
    /** FUNCTION BODY **/
    {body}
    /** SET RETURN VALUE **/
    for (idx_t i = 0; i < args.size(); i++) {{
      result.SetValue(i, return_values[i]);
    }}
  }}

fshell2: |-
  void {function_name}(DataChunk &args, ExpressionState &state, Vector &result) {{
    const int count = args.size();
    result.SetVectorType(VectorType::FLAT_VECTOR);

    // the extraction of function arguments
    {function_args}
    {vector_create}

    for (int base_idx = 0; base_idx < count; base_idx++) {{
      {arg_indexes}
      Value temp_result;
      bool  temp_result_null = false;
      {function_name}_body({subfunc_args}temp_result, temp_result_null);
      if (temp_result_null) {{
        FlatVector::SetNull(result, base_idx, true);
      }}
      else {{
        result.SetValue(base_idx, std::move(temp_result));
      }}
    }}

    result.Verify(count);
  }}

vector_create: |-
  DataChunk tmp_chunk;
  vector<LogicalType> tmp_types({vector_count}, LogicalType::VARCHAR);
  tmp_chunk.Initialize(*context, tmp_types);

fargs2: |-
    auto &{var_name} = args.data[{i}];
    auto {var_name}_type = {var_name}.GetVectorType();
    UnifiedVectorFormat {var_name}_data;
    {var_name}.ToUnifiedFormat(count, {var_name}_data);

argindex: |-
  auto {var_name}_index = {var_name}_data.sel->get_index(base_idx);

subfunc_arg: |-
  {var_name}.GetValue({var_name}_index), !{var_name}_data.validity.RowIsValid({var_name}_index)


fbodyshell: |-
  inline void {function_name}_body({fbody_args}Value& result, bool& result_null) {{
    if ({check_null})
    {{
      result_null = true;
      return;
    }}
    // the declaration / initialization of local variables
    {vars_init}
    {action}
  }}

return_name: |-
  result

fbody_arg: |-
  const Value& v{i}, bool {var_name}_null

# farg: |-
#   {type} {name}

farg: |-
  std::vector<duckdb::Value> {name}(args.size());
  for (idx_t {i_var} = 0; {i_var} < args.size(); {i_var}++) {{
    {name}[{i_var}] = args.data[{arg_num}].GetValue({i_var});
  }}

fdecl_var: |-
  std::vector<duckdb::Value> {name} = {var};

finit_var: |-
  std::vector<duckdb::Value> {name}(args.size());

func_dec: |-
  void {function_name}(duckdb::DataChunk &args, duckdb::ExpressionState &state, duckdb::Vector &result);

fcreate: |-
  auto {function_name}_scalar_function = ScalarFunction("{function_name}", {{{args_logical_types}}}, {return_logical_type}, {function_name});
  ExtensionUtil::RegisterFunction(instance, {function_name}_scalar_function);
  